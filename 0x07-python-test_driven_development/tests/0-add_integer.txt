# 0-add_integer.txt
===============================
Test Document
===============================

""""
This module defines an addition function 'add_integer(a, b=98)'.

Usage: add_integer  returns the addition of two arguments.
"""

    >>> add_integer = __import__('0-add_integer').add_integer
    >>> add_integer(2, 2)
    4
 
    Negative number with negative number
    >>> add_integer(-2, -2)
    -4
 
    Negative number with positive number
    >>> add_integer(-1, 1)
    0
  
    Positive number with negative number
    >>> add_integer(1, -1)
    0
  
    Positive number with 0
    >>> add_integer(1, 0)
    1

    Negative number with 0
    >>> add_integer(-1, 0)
    -1

    Positive float number with negative number
    >>> add_integer(2.8, 1)
    3

    Positive number with no param for b
    >>> add_integer(1)
    99

    Zero with default param of 98
    >>> add_integer(0)
    98

    >>> add_integer(None, 3)
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer("L", "dan")
    Traceback (most recent call last):
    TypeError: a must be an integer

    >>> add_integer(3, 'abc')
    Traceback (most recent call last):
    TypeError: b must be an integer

    >>> add_integer(float('nan'))
    Traceback (most recent call last):
    ValueError: cannot convert float NaN to integer

    >>> add_integer(int('nan'))
    Traceback (most recent call last):
    ValueError: invalid literal for int() with base 10: 'nan'

    >>> add_integer(4, float('inf'))
    Traceback (most recent call last):
    OverflowError: cannot convert float infinity to integer
